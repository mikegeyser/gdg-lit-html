{
  "HTML for initial app": {
    "scope": "",
    "prefix": "_html_app",
    "body": [
      "<section class=\"todoapp\">",
      "  <header class=\"header\">",
      "    <h1>todos</h1>",
      "  </header>",
      "",
      "  <section class=\"main\"></section>",
      "</section>"
    ],
    "description": "HTML for initial app"
  },
  "HTML for add todo": {
    "scope": "",
    "prefix": "_html_add_todo",
    "body": ["<input class=\"new-todo\" placeholder=\"What needs to be done?\" autofocus=\"\" />"],
    "description": "HTML for add todo"
  },
  "Code for handling the keyup event": {
    "scope": "",
    "prefix": "_handleAddTodo",
    "body": [
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos.push({",
      "    title: e.target.value,",
      "    completed: false",
      "  });",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};"
    ],
    "description": "Code for handling the keyup event"
  },
  "Data for the initial list": {
    "scope": "",
    "prefix": "_data",
    "body": [
      "{ title: 'Initialise the app', completed: true },",
      "{ title: 'Create a todo', completed: true },",
      "{ title: 'List the todos', completed: true },",
      "{ title: 'Mark a todo as completed', completed: false },",
      "{ title: '????', completed: false },",
      "{ title: 'Profit!', completed: false },"
    ],
    "description": "Data for the initial list"
  },
  "HTML for view todo": {
    "scope": "",
    "prefix": "_html_view_todo",
    "body": [
      "<li>",
      "  <div class=\"view\">",
      "    <input class=\"toggle\" type=\"checkbox\" />",
      "    <label></label>",
      "  </div>",
      "</li>"
    ],
    "description": "HTML for view todo"
  },
  "Create a LitElement component": {
    "scope": "",
    "prefix": "_component",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "",
      "class ${1:ClassName} extends LitElement {",
      "",
      "    createRenderRoot() {",
      "      return this;",
      "    }",
      "",
      "    static get properties() {",
      "        return {",
      "        };",
      "    }",
      "",
      "    render() {",
      "        return html``;",
      "    }",
      "",
      "}",
      "",
      "window.customElements.define('${2:element-name}', ${1:ClassName});"
    ]
  },

  "Backup for step 1": {
    "scope": "",
    "prefix": "?1_index_html",
    "body": [
      "<!DOCTYPE html>",
      "<html lang=\"en\">",
      "<head>",
      "    <meta charset=\"UTF-8\">",
      "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
      "    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">",
      "    <title>Demo</title>",
      "    <link rel=\"stylesheet\" href=\"./node_modules/todomvc-app-css/index.css\">",
      "</head>",
      "<body>",
      "    <h1>Hello GDG!</h1>",
      "</body>",
      "</html>"
    ]
  },
  "Backup for step 2": {
    "scope": "",
    "prefix": "?2_app_js",
    "body": [
      "let wat = (staticParts, ...dynamicParts) => document.createElement('h1');",
      "",
      "let gdg = 'Google Developer Group';",
      "let app = wat`<b>Hello \\${gdg}!</b> The time is now ${new Date().toTimeString()}`;",
      "",
      "document.body.append(app);"
    ]
  },
  "Backup for step 3": {
    "scope": "",
    "prefix": "?3_app_js",
    "body": [
      "import {html, render} from './node_modules/lit-html/lit-html.js';",
      "",
      "let gdg = 'Google Developer Group';",
      "let app = html`<b>Hello \\${gdg}!</b> The time is now ${new Date().toTimeString()}`;",
      "",
      "render(app, document.body);"
    ]
  },
  "Backup for step 4": {
    "scope": "",
    "prefix": "?4_app_js",
    "body": [
      "import { html, render } from './node_modules/lit-html/lit-html.js';",
      "",
      "let todos = [];",
      "",
      "let app = () => html`",
      "  <section class=\"todoapp\">",
      "    <header class=\"header\">",
      "      <h1>todos</h1>",
      "    </header>",
      "",
      "    <section class=\"main\"></section>",
      "  </section>",
      "`;",
      "",
      "render(app(), document.body);"
    ]
  },
  "Backup for step 5": {
    "scope": "",
    "prefix": "?5_app_js",
    "body": [
      "import { html, render } from './node_modules/lit-html/lit-html.js';",
      "",
      "let todos = [];",
      "",
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos.push({",
      "    title: e.target.value,",
      "    completed: false",
      "  });",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};",
      "",
      "let addTodo = () => html`",
      "  <input",
      "    class=\"new-todo\"",
      "    placeholder=\"What needs to be done?\"",
      "    autofocus=\"\"",
      "    @keyup=\"\\${handleAddTodo}\"",
      "  />",
      "`;",
      "",
      "let app = () => html`",
      "  <section class=\"todoapp\">",
      "    <header class=\"header\">",
      "      <h1>todos</h1>",
      "      \\${addTodo()}",
      "    </header>",
      "",
      "    <section class=\"main\"></section>",
      "  </section>",
      "`;",
      "",
      "let update = () => render(app(), document.body);",
      "update();",
      ""
    ]
  },
  "Backup for step 6": {
    "scope": "",
    "prefix": "?6_app_js",
    "body": [
      "import { html, render } from './node_modules/lit-html/lit-html.js';",
      "",
      "let todos = [",
      "  { title: 'Initialise the app', completed: true },",
      "  { title: 'Create a todo', completed: true },",
      "  { title: 'List the todos', completed: true },",
      "  { title: 'Mark a todo as completed', completed: false },",
      "  { title: '????', completed: false },",
      "  { title: 'Profit!', completed: false }",
      "];",
      "",
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos.push({",
      "    title: e.target.value,",
      "    completed: false",
      "  });",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};",
      "",
      "let addTodo = () => html`",
      "  <input",
      "    class=\"new-todo\"",
      "    placeholder=\"What needs to be done?\"",
      "    autofocus=\"\"",
      "    @keyup=\"\\${handleAddTodo}\"",
      "  />",
      "`;",
      "",
      "let viewTodo = (todo) => html`",
      "  <li>",
      "    <div class=\"view\">",
      "      <input class=\"toggle\" type=\"checkbox\" />",
      "      <label>\\${todo.title}</label>",
      "    </div>",
      "  </li>",
      "`;",
      "",
      "let app = () => html`",
      "  <section class=\"todoapp\">",
      "    <header class=\"header\">",
      "      <h1>todos</h1>",
      "      \\${addTodo()}",
      "    </header>",
      "",
      "    <section class=\"main\">",
      "      <ul class=\"todo-list\">",
      "        \\${todos.map((todo) => viewTodo(todo))}",
      "      </ul>",
      "    </section>",
      "  </section>",
      "`;",
      "",
      "let update = () => render(app(), document.body);",
      "update();"
    ]
  },
  "Backup for step 7": {
    "scope": "",
    "prefix": "?7_app_js",
    "body": [
      "import { html, render } from './node_modules/lit-html/lit-html.js';",
      "",
      "let todos = [",
      "  { title: 'Initialise the app', completed: true },",
      "  { title: 'Create a todo', completed: true },",
      "  { title: 'List the todos', completed: true },",
      "  { title: 'Mark a todo as completed', completed: false },",
      "  { title: '????', completed: false },",
      "  { title: 'Profit!', completed: false }",
      "];",
      "",
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos.push({",
      "    title: e.target.value,",
      "    completed: false",
      "  });",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};",
      "",
      "let addTodo = () => html`",
      "  <input",
      "    class=\"new-todo\"",
      "    placeholder=\"What needs to be done?\"",
      "    autofocus=\"\"",
      "    @keyup=\"\\${handleAddTodo}\"",
      "  />",
      "`;",
      "",
      "let handleToggleCompleted = (todo) => (todo.completed = !todo.completed);",
      "",
      "let viewTodo = (todo) => html`",
      "  <li>",
      "    <div class=\"view\">",
      "      <input",
      "        class=\"toggle\"",
      "        type=\"checkbox\"",
      "        ?checked=\"\\${todo.completed}\"",
      "        @click=\"\\${(e) => handleToggleCompleted(todo)}\"",
      "      />",
      "      <label>\\${todo.title}</label>",
      "    </div>",
      "  </li>",
      "`;",
      "",
      "let app = () => html`",
      "  <section class=\"todoapp\">",
      "    <header class=\"header\">",
      "      <h1>todos</h1>",
      "      \\${addTodo()}",
      "    </header>",
      "",
      "    <section class=\"main\">",
      "      <ul class=\"todo-list\">",
      "        \\${todos.map((todo) => viewTodo(todo))}",
      "      </ul>",
      "    </section>",
      "  </section>",
      "`;",
      "",
      "let update = () => render(app(), document.body);",
      "update();",
      ""
    ]
  },
  "Backup for step 8": {
    "scope": "",
    "prefix": "?8_app_js",
    "body": [
      "import { html, render } from './node_modules/lit-html/lit-html.js';",
      "",
      "let todos = [",
      "  { title: 'Initialise the app', completed: true },",
      "  { title: 'Create a todo', completed: true },",
      "  { title: 'List the todos', completed: true },",
      "  { title: 'Mark a todo as completed', completed: false },",
      "  { title: '????', completed: false },",
      "  { title: 'Profit!', completed: false }",
      "];",
      "",
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos = [",
      "    ...todos,",
      "    {",
      "      title: e.target.value,",
      "      completed: false",
      "    }",
      "  ];",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};",
      "",
      "let addTodo = () => html`",
      "  <input",
      "    class=\"new-todo\"",
      "    placeholder=\"What needs to be done?\"",
      "    autofocus=\"\"",
      "    @keyup=\"\\${handleAddTodo}\"",
      "  />",
      "`;",
      "",
      "let handleToggleCompleted = (todo) =>",
      "  (todos = todos.map((t) => {",
      "    if (t !== todo) return t;",
      "",
      "    return {",
      "      ...todo,",
      "      completed: !todo.completed",
      "    };",
      "  }));",
      "",
      "let viewTodo = (todo) => html`",
      "  <li>",
      "    <div class=\"view\">",
      "      <input",
      "        class=\"toggle\"",
      "        type=\"checkbox\"",
      "        ?checked=\"\\${todo.completed}\"",
      "        @click=\"\\${(e) => handleToggleCompleted(todo)}\"",
      "      />",
      "      <label>\\${todo.title}</label>",
      "    </div>",
      "  </li>",
      "`;",
      "",
      "let app = () => html`",
      "  <section class=\"todoapp\">",
      "    <header class=\"header\">",
      "      <h1>todos</h1>",
      "      \\${addTodo()}",
      "    </header>",
      "",
      "    <section class=\"main\">",
      "      <ul class=\"todo-list\">",
      "        \\${todos.map((todo) => viewTodo(todo))}",
      "      </ul>",
      "    </section>",
      "  </section>",
      "`;",
      "",
      "let update = () => render(app(), document.body);",
      "update();",
      ""
    ]
  },
  "Backup for step 9 - app.js": {
    "scope": "",
    "prefix": "?9_app_js",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "",
      "let handleAddTodo = (e) => {",
      "  if (e.key !== 'Enter') return;",
      "",
      "  todos = [",
      "    ...todos,",
      "    {",
      "      title: e.target.value,",
      "      completed: false",
      "    }",
      "  ];",
      "",
      "  e.target.value = '';",
      "",
      "  update();",
      "};",
      "",
      "let addTodo = () => html`",
      "  <input",
      "    class=\"new-todo\"",
      "    placeholder=\"What needs to be done?\"",
      "    autofocus=\"\"",
      "    @keyup=\"\\${handleAddTodo}\"",
      "  />",
      "`;",
      "",
      "let handleToggleCompleted = (todo) =>",
      "  (todos = todos.map((t) => {",
      "    if (t !== todo) return t;",
      "",
      "    return {",
      "      ...todo,",
      "      completed: !todo.completed",
      "    };",
      "  }));",
      "",
      "let viewTodo = (todo) => html`",
      "  <li>",
      "    <div class=\"view\">",
      "      <input",
      "        class=\"toggle\"",
      "        type=\"checkbox\"",
      "        ?checked=\"\\${todo.completed}\"",
      "        @click=\"\\${(e) => handleToggleCompleted(todo)}\"",
      "      />",
      "      <label>\\${todo.title}</label>",
      "    </div>",
      "  </li>",
      "`;",
      "",
      "class App extends LitElement {",
      "  createRenderRoot() {",
      "    return this;",
      "  }",
      "",
      "  static get properties() {",
      "    return {",
      "      todos: Array",
      "    };",
      "  }",
      "",
      "  constructor() {",
      "    super();",
      "",
      "    this.todos = [",
      "      { title: 'Initialise the app', completed: true },",
      "      { title: 'Create a todo', completed: true },",
      "      { title: 'List the todos', completed: true },",
      "      { title: 'Mark a todo as completed', completed: false },",
      "      { title: '????', completed: false },",
      "      { title: 'Profit!', completed: false }",
      "    ];",
      "  }",
      "  render() {",
      "    return html`",
      "      <section class=\"todoapp\">",
      "        <header class=\"header\">",
      "          <h1>todos</h1>",
      "          \\${addTodo()}",
      "        </header>",
      "",
      "        <section class=\"main\">",
      "          <ul class=\"todo-list\">",
      "            \\${this.todos.map((todo) => viewTodo(todo))}",
      "          </ul>",
      "        </section>",
      "      </section>",
      "    `;",
      "  }",
      "}",
      "",
      "window.customElements.define('todo-app', App);"
    ]
  },
  "Backup for step 9 - index.html": {
    "scope": "",
    "prefix": "?9_index_html",
    "body": [
      "<!DOCTYPE html>",
      "<html lang=\"en\">",
      "  <head>",
      "    <meta charset=\"UTF-8\" />",
      "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />",
      "    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />",
      "    <title>Demo</title>",
      "    <link rel=\"stylesheet\" href=\"./node_modules/todomvc-app-css/index.css\" />",
      "  </head>",
      "  <body>",
      "    <todo-app></todo-app>",
      "",
      "    <script type=\"module\" src=\"./app.js\"></script>",
      "  </body>",
      "</html>"
    ]
  },
  "Backup for step 9 - package.json": {
    "scope": "",
    "prefix": "?9_package_json",
    "body": [
      "{",
      "  \"name\": \"demo\",",
      "  \"version\": \"1.0.0\",",
      "  \"description\": \"\",",
      "  \"main\": \"index.js\",",
      "  \"scripts\": {",
      "    \"start\": \"owc-dev-server\"",
      "  },",
      "  \"author\": \"\",",
      "  \"license\": \"ISC\",",
      "  \"devDependencies\": {",
      "    \"http-server\": \"^0.11.1\",",
      "    \"owc-dev-server\": \"^0.4.3\"",
      "  },",
      "  \"dependencies\": {",
      "    \"lit-element\": \"^2.1.0\",",
      "    \"lit-html\": \"^1.1.0\",",
      "    \"todomvc-app-css\": \"^2.2.0\",",
      "    \"todomvc-common\": \"^1.0.5\"",
      "  }",
      "}"
    ]
  },
  "Backup for step 10 - app.js": {
    "scope": "",
    "prefix": "?10_app_js",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "import './add-todo.js';",
      "",
      "let handleToggleCompleted = (todo) =>",
      "  (todos = todos.map((t) => {",
      "    if (t !== todo) return t;",
      "",
      "    return {",
      "      ...todo,",
      "      completed: !todo.completed",
      "    };",
      "  }));",
      "",
      "let viewTodo = (todo) => html`",
      "  <li>",
      "    <div class=\"view\">",
      "      <input",
      "        class=\"toggle\"",
      "        type=\"checkbox\"",
      "        ?checked=\"\\${todo.completed}\"",
      "        @click=\"\\${(e) => handleToggleCompleted(todo)}\"",
      "      />",
      "      <label>\\${todo.title}</label>",
      "    </div>",
      "  </li>",
      "`;",
      "",
      "class App extends LitElement {",
      "  createRenderRoot() {",
      "    return this;",
      "  }",
      "",
      "  static get properties() {",
      "    return {",
      "      todos: Array",
      "    };",
      "  }",
      "",
      "  constructor() {",
      "    super();",
      "",
      "    this.todos = [",
      "      { title: 'Initialise the app', completed: true },",
      "      { title: 'Create a todo', completed: true },",
      "      { title: 'List the todos', completed: true },",
      "      { title: 'Mark a todo as completed', completed: false },",
      "      { title: '????', completed: false },",
      "      { title: 'Profit!', completed: false }",
      "    ];",
      "  }",
      "  render() {",
      "    return html`",
      "      <section class=\"todoapp\">",
      "        <header class=\"header\">",
      "          <h1>todos</h1>",
      "          <add-todo .addTodo=\"\\${(todo) => this.addTodo(todo)}\"></add-todo>",
      "        </header>",
      "",
      "        <section class=\"main\">",
      "          <ul class=\"todo-list\">",
      "            \\${this.todos.map((todo) => viewTodo(todo))}",
      "          </ul>",
      "        </section>",
      "      </section>",
      "    `;",
      "  }",
      "",
      "  addTodo(todo) {",
      "    this.todos = [...this.todos, todo];",
      "  }",
      "}",
      "",
      "window.customElements.define('todo-app', App);"
    ]
  },
  "Backup for step 10 - add-todo.js": {
    "scope": "",
    "prefix": "?10_add_todo_js",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "",
      "class AddTodo extends LitElement {",
      "  createRenderRoot() {",
      "    return this;",
      "  }",
      "",
      "  static get properties() {",
      "    return {",
      "      addTodo: Object",
      "    };",
      "  }",
      "",
      "  render() {",
      "    return html`",
      "      <input",
      "        class=\"new-todo\"",
      "        placeholder=\"What needs to be done?\"",
      "        autofocus=\"\"",
      "        @keyup=\"\\${(e) => this.handleAddTodo(e)}\"",
      "      />",
      "    `;",
      "  }",
      "",
      "  handleAddTodo(e) {",
      "    if (e.key !== 'Enter') return;",
      "",
      "    this.addTodo({",
      "      title: e.target.value,",
      "      completed: false",
      "    });",
      "",
      "    e.target.value = '';",
      "  }",
      "}",
      "",
      "window.customElements.define('add-todo', AddTodo);"
    ]
  },
  "Backup for step 11 - app.js": {
    "scope": "",
    "prefix": "?11_app_js",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "import './add-todo.js';",
      "import './view-todo.js';",
      "",
      "class App extends LitElement {",
      "  createRenderRoot() {",
      "    return this;",
      "  }",
      "",
      "  static get properties() {",
      "    return {",
      "      todos: Array",
      "    };",
      "  }",
      "",
      "  constructor() {",
      "    super();",
      "",
      "    this.todos = [",
      "      { title: 'Initialise the app', completed: true },",
      "      { title: 'Create a todo', completed: true },",
      "      { title: 'List the todos', completed: true },",
      "      { title: 'Mark a todo as completed', completed: false },",
      "      { title: '????', completed: false },",
      "      { title: 'Profit!', completed: false }",
      "    ];",
      "  }",
      "  render() {",
      "    return html`",
      "      <section class=\"todoapp\">",
      "        <header class=\"header\">",
      "          <h1>todos</h1>",
      "          <add-todo .addTodo=\"\\${(todo) => this.addTodo(todo)}\"></add-todo>",
      "        </header>",
      "",
      "        <section class=\"main\">",
      "          <ul class=\"todo-list\">",
      "            \\${this.todos.map(",
      "              (todo) => html`",
      "                <view-todo",
      "                  .todo=\"\\${todo}\"",
      "                  .handleToggleCompleted=\"\\${(todo) => this.handleToggleCompleted(todo)}\"",
      "                ></view-todo>",
      "              `",
      "            )}",
      "          </ul>",
      "        </section>",
      "      </section>",
      "    `;",
      "  }",
      "",
      "  addTodo(todo) {",
      "    this.todos = [...this.todos, todo];",
      "  }",
      "",
      "  handleToggleCompleted(todo) {",
      "    this.todos = this.todos.map((t) => {",
      "      if (t !== todo) return t;",
      "",
      "      return {",
      "        ...todo,",
      "        completed: !todo.completed",
      "      };",
      "    });",
      "  }",
      "}",
      "",
      "window.customElements.define('todo-app', App);"
    ]
  },
  "Backup for step 11 - view-todo.js": {
    "scope": "",
    "prefix": "?11_view_todo_js",
    "body": [
      "import { html, LitElement } from 'lit-element';",
      "",
      "class ViewTodo extends LitElement {",
      "  createRenderRoot() {",
      "    return this;",
      "  }",
      "",
      "  static get properties() {",
      "    return {",
      "      todo: Object,",
      "      handleToggleCompleted: Object",
      "    };",
      "  }",
      "",
      "  render() {",
      "    return html`",
      "      <li>",
      "        <div class=\"view\">",
      "          <input",
      "            class=\"toggle\"",
      "            type=\"checkbox\"",
      "            ?checked=\"\\${this.todo.completed}\"",
      "            @click=\"\\${(e) => this.handleToggleCompleted(this.todo)}\"",
      "          />",
      "          <label>\\${this.todo.title}</label>",
      "        </div>",
      "      </li>",
      "    `;",
      "  }",
      "}",
      "",
      "window.customElements.define('view-todo', ViewTodo);"
    ]
  }
}
